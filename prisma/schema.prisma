// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 如果遇到 Can't reach database server 问题， 是因为VPN问题引起的，可以多试几次

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

// Issue
model Issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  status      Status   @default(OPEN)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

enum Status {
  OPEN
  IN_PROCESS
  CLOSED
}

// trello
model Board {
  id       Int       @id @default(autoincrement())
  title    String
  subjects Subject[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Subject {
  id       Int    @id @default(autoincrement())
  title    String
  position Int

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Card {
  id       String @id @default(uuid())
  title    String
  position Int

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
